#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Credit to https://github.com/laszloszurok/tulyp

import os
import pydoc
import sys
import dbus
from pathlib import Path

from lyrics_sources import genius, azlyrics, google
from exceptions.lyrics_not_found import LyricsNotFoundError
from utils import create_cache_path

cache_path = Path.home().joinpath(".cache", "lyrics")

player = "ncspot"
pager_cmd = "bat -n"
sources = ["genius", "google", "azlyrics"]

source = ""
if len(sys.argv) > 1:
    source = sys.argv[1]

def show_lyrics(title: str, artist: str, source: str, cache: bool = True) -> None:
    """Display lyrics and write it to cache or serve lyrics from cache if cache=True.

    Args:
        track_name (str): track name in format "artist - title"
        source (str): source to fetch lyrics from (genius, azlyrics, google)
        cache (bool): whether to check if lyrics are available from cache
    """
    # some empty lines concatenated to the lyrics for better readablility in a pager
    bottom_padding = "\n" * 30
    track_name = f"{artist} - {title}"
    filepath = create_cache_path(track_name)
    serving_from_cache = False

    if not os.path.isdir(cache_path):
        os.makedirs(cache_path)

    if os.path.isfile(filepath) and cache:
        with open(filepath) as file:
            print("using lyrics from cache")
            lyrics_lines = file.read()
            serving_from_cache = True
    else:
        if source == "genius":
            print("trying genius...")
            lyrics_lines = genius.get_lyrics(title=title, artist=artist)
        elif source == "google":
            print("trying google...")
            lyrics_lines = google.get_lyrics(title=title, artist=artist)
        elif source == "azlyrics":
            print("trying azlyrics...")
            lyrics_lines = azlyrics.get_lyrics(title=title, artist=artist)
        else:
            print(f"Unknown source {source}")
            sys.exit()

    if not serving_from_cache:
        with open(filepath, "w") as file:
            file.writelines(lyrics_lines)

    pydoc.pipepager(
        f"{track_name}\n\n{lyrics_lines}{bottom_padding}",
        cmd=pager_cmd
    )

def main() -> None:
    """Run tulyp."""
    try:
        session_bus = dbus.SessionBus()

        bus_data = (f"org.mpris.MediaPlayer2.{player}", "/org/mpris/MediaPlayer2")
        bus = session_bus.get_object(*bus_data)

        interface = dbus.Interface(bus, "org.freedesktop.DBus.Properties")
        metadata = interface.Get("org.mpris.MediaPlayer2.Player", "Metadata")

        try:
            artist_list = metadata.get("xesam:albumArtist")
            artist = next(iter(artist_list))
            title = metadata.get("xesam:title")
        except BaseException:
            print("Unable to get metadata")
            sys.exit()

    except dbus.DBusException:
        print(f"{player} is not running")
        sys.exit()

    lyrics_found: bool = False

    if not source:
        for s in sources:
            try:
                show_lyrics(title=title, artist=artist, source=s)
                lyrics_found = True
                break
            except LyricsNotFoundError:
                print(f"Could not get lyrics from {s}\n")
    elif source not in sources:
        print("Unknown source")
        sys.exit()
    else:
        try:
            show_lyrics(title=title, artist=artist, source=source, cache=False)
            lyrics_found = True
        except LyricsNotFoundError:
            lyrics_found = False

    if not lyrics_found:
        print("No lyrics found")

if __name__ == "__main__":
    main()
