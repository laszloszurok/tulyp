#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Credit to https://github.com/laszloszurok/tulyp

import os
import pydoc
import re
import sys
import dbus
from pathlib import Path
from urllib.error import URLError
from urllib.parse import quote
from urllib.request import Request, urlopen

from lyrics_sources import genius, azlyrics, google
from exceptions.lyrics_not_found import LyricsNotFoundError

cache_path = Path.home().joinpath(".cache", "lyrics")

player = "ncspot"
pager_cmd = "bat -n"
sources = ["genius", "google", "azlyrics"]

search_url = "https://www.google.com/search?q="

source = ""
if len(sys.argv) > 1:
    source = sys.argv[1]

def query(track_name: str) -> str:
    """Take a search entry and encode it."""
    track_name = re.sub(r"(\[.*\].*)|(\(.*\).*)", "", track_name).strip()
    return quote(track_name + " lyrics")

def get_filename(track_name: str) -> str:
    """Return name of cache file made from track_name."""
    filename = re.sub(r"(\[.*\].*)|(\(.*\).*)", "", track_name).strip()  # removing text in brackets [] ()
    filename = re.sub(r"\s|\/|\\|\.", "", filename)
    return os.path.join(cache_path, filename)


def show_lyrics(track_name: str, source: str, cache: bool = True) -> None:
    """Display lyrics, write lyrics to cache, and serve lyrics from cache if cache=True.

    Keyword arguments:
        track_name: str -- track name in format "artist - title"
        source: str -- source to fetch lyrics from (genius, azlyrics, google)
        cache: bool -- whether to check if lyrics are available from cache
    """
    # some empty lines concatenated to the lyrics for better readablility in a pager
    bottom_padding = "\n" * 30

    filepath = get_filename(track_name)

    if not os.path.isdir(cache_path):
        os.makedirs(cache_path)

    if os.path.isfile(filepath) and cache:
        # lyrics exist
        with open(filepath) as file:
            print("using lyrics from cache")
            lyrics_lines = file.read().splitlines()
            lyrics_lines = "\n".join(lyrics_lines)
    else:
        if source == "genius":
            print("trying genius...")
            split = track_name.split(" - ")
            artist = split[0]
            title = split[1]
            lyrics = genius.get_lyrics(title=title, artist=artist)
            lyrics_lines = track_name + "\n\n" + lyrics + bottom_padding
        elif source == "google":
            print("trying google...")
            lyrics_lines = google.get_lyrics(search_url + query(track_name))
            lyrics_lines = "\n".join(lyrics_lines)
            if len(lyrics_lines) == 0:
                raise LyricsNotFoundError
            lyrics_lines = track_name + "\n\n" + lyrics_lines + bottom_padding
        elif source == "azlyrics":
            print("trying azlyrics...")
            lyrics_lines = azlyrics.get_lyrics(search_url + query(track_name))
            lyrics_lines = "\n".join(lyrics_lines)
            lyrics_lines = track_name + "\n\n" + lyrics_lines + bottom_padding
        else:
            print(f"Unknown source {source}")
            sys.exit()

    with open(filepath, "w") as file:
        file.writelines(lyrics_lines)

    pydoc.pipepager(lyrics_lines, cmd=pager_cmd)

def main() -> None:
    """Run tulyp."""
    try:
        session_bus = dbus.SessionBus()

        bus_data = (f"org.mpris.MediaPlayer2.{player}", "/org/mpris/MediaPlayer2")
        bus = session_bus.get_object(*bus_data)

        interface = dbus.Interface(bus, "org.freedesktop.DBus.Properties")
        metadata = interface.Get("org.mpris.MediaPlayer2.Player", "Metadata")

        try:
            artist_list = metadata.get("xesam:albumArtist")
            artist = next(iter(artist_list))
            title = metadata.get("xesam:title")
        except BaseException:
            print("Unable to get metadata")
            sys.exit()

        track_name = f"{artist} - {title}"

    except dbus.DBusException:
        print(f"{player} is not running")
        sys.exit()

    lyrics_found: bool = False

    if not source:
        for s in sources:
            try:
                show_lyrics(track_name, s)
                lyrics_found = True
                break
            except LyricsNotFoundError:
                print(f"Could not get lyrics from {s}\n")
    else:
        match source:
            case "genius":
                try:
                    show_lyrics(track_name, "genius", False)
                except LyricsNotFoundError:
                    sys.exit()
            case "google":
                try:
                    show_lyrics(track_name, "google", False)
                except LyricsNotFoundError:
                    sys.exit()
            case "azlyrics":
                try:
                    show_lyrics(track_name, "azlyrics", False)
                except LyricsNotFoundError:
                    sys.exit()
            case _:
                print("Unknown source")

    if not lyrics_found:
        print("No lyrics found")

if __name__ == "__main__":
    main()
